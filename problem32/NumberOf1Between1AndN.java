package problem32;
/*
 * 面试题32：从1到n整数中1出现的次数
 * 比如输入12，从1到12中包含了1的数字有1，10，11，12，所以1出现了5次。
 * 思路1：好理解但是复杂度高，遍历一遍，取余判断个位数是不是1。输入数字为n，n有O(logn)位，判断每一位是不是1的复杂度为O(n*logn)。
 * 思路2：复杂度O(logn)，比较难理解。从网上复制一段过来：
 * 如果要计算百位上1出现的次数，它要受到3方面的影响：百位上的数字，百位以下（低位）的数字，百位以上（高位）的数字。
 * ① 如果百位上数字为0，百位上可能出现1的次数由更高位决定。比如：12013，则可以知道百位出现1的情况可能是：100~199，1100~1199,2100~2199，，...，11100~11199，一共1200个。可以看出是由更高位数字（12）决定，并且等于更高位数字（12）乘以 当前位数（100）。
 * ② 如果百位上数字为1，百位上可能出现1的次数不仅受更高位影响还受低位影响。比如：12113，则可以知道百位受高位影响出现的情况是：100~199，1100~1199,2100~2199，，....，11100~11199，一共1200个。和上面情况一样，并且等于更高位数字（12）乘以 当前位数（100）。但同时它还受低位影响，百位出现1的情况是：12100~12113,一共114个，等于低位数字（113）+1。
 * ③ 如果百位上数字大于1（2~9），则百位上出现1的情况仅由更高位决定，比如12213，则百位出现1的情况是：100~199,1100~1199，2100~2199，...，11100~11199,12100~12199,一共有1300个，并且等于更高位数字+1（12+1）乘以当前位数（100）。
 */
public class NumberOf1Between1AndN {
	//思路2的方法，比较看技巧
	public static int numberOf1Between1AndN(int n) {
        int count = 0;//1的个数
        int i = 1;//当前位，从个位开始
        int current = 0,after = 0,before = 0;
        while((n/i) != 0){
            current = (n/i)%10; //当前位数字，个位
            before = n/(i*10); //高一位的数字
            after = n-(n/i)*i; //低一位的数字
            //如果为0,出现1的次数由高位决定,等于高位数字*当前位数
            if (current == 0){
            	count += before*i;
            }
            //如果为1,出现1的次数由高位和低位决定,高位*当前位+低位+1
            else if(current == 1){
            	count += before * i + after + 1;
            }
            //如果大于1,出现1的次数由高位决定,（高位数字+1）*当前位数
            else{
                count += (before + 1) * i;
            }    
            //前移一位
            i = i*10;
        }
        return count;
    }
	//以下是思路1的方法，好理解但是复杂度高
	public static int easy(int n){
		int number = 0;
		for(int i=1;i<=n;i++){
			number += numberOf1(i);
		}
		return number;
	}
	public static int numberOf1(int n){
		int number = 0;
		while(n>0){
			if((n%10) == 1){
				number++;
			}
			n = n/10;
		}
		return number;
	}
	public static void main(String[] args) {
		int n = numberOf1Between1AndN(21345);
		System.out.println(n);
	}
}
